{"version":"0.2.0","body":"async function main(workbook: ExcelScript.Workbook): Promise<string | StringConstructor> {\n  // Load the \"HardWords\" table from the workbook\n  let hardWordsSheet = workbook.getWorksheet(\"Answers\")\n  let spellingsSheet = workbook.getWorksheet(\"Spellings\")\n  let hardWordsTable = hardWordsSheet.getTable(\"HardWords\")\n  let table1 = hardWordsSheet.getTable(\"table1\")\n  \n  // Select 5 random words from the \"HardWords\" table\n  let selectedWords: string[] = []\n  let y: number = 0\n  //populate the selectedWords array with words from the Hardwords table\n  while (selectedWords.length < 5) {\n    let rowIndex: number = Math.floor(Math.random() * hardWordsTable.getRangeBetweenHeaderAndTotal().getRowCount())\n    let hardWord: string = hardWordsSheet.getRange('B' + rowIndex).getValue().toString()\n    if (hardWord !== undefined) {\n      selectedWords[y] = hardWord\n      y++\n    }\n  }\n  let difficulty: number = 2\n  //retrieve the difficulty level\n  let diffCellVal: string = spellingsSheet.getRange('h3').getValue().toString()\n  console.log('diffCellVal: ' + diffCellVal)\n  let diffCellVal1: number\n  if (diffCellVal === '1' || diffCellVal === '2' || diffCellVal === '3') {\n    diffCellVal1 = parseInt(diffCellVal)\n  }\n  else {\n    diffCellVal1 = 2\n  }\n  // Replace two random characters in each selected word with asterisks\n  let transformedWords = selectedWords.map((word) => {\n    let indexes: number[] = []\n    while (indexes.length < diffCellVal1) {\n      let index = Math.floor(Math.random() * word.length)\n      if (indexes.indexOf(index) === -1) {\n        indexes.push(index)\n      }\n    }\n    let transformedWord: string = \"\"\n    for (let i = 0; i < word.length; i++) {\n      if (indexes.indexOf(i) !== -1) {\n        transformedWord += \"*\";\n      } else {\n        transformedWord += word.charAt(i);\n      }\n    }\n    return transformedWord;\n  });\n\n  // Write the transformed words to the \"Answers\" worksheet\n  hardWordsSheet.getRange(\"D1184\").setValue(selectedWords[0])\n  hardWordsSheet.getRange(\"D1185\").setValue(selectedWords[1])\n  hardWordsSheet.getRange(\"D1186\").setValue(selectedWords[2])\n  hardWordsSheet.getRange(\"D1187\").setValue(selectedWords[3])\n  hardWordsSheet.getRange(\"D1188\").setValue(selectedWords[4])\n  // sort the Table1\n  table1.getSort().apply([{ key: 0, ascending: true }]);\n  // Write the transformed words to the \"Spellings\" worksheet\n  spellingsSheet.getRange(\"B3\").setValue(transformedWords[0])\n  spellingsSheet.getRange(\"B4\").setValue(transformedWords[1])\n  spellingsSheet.getRange(\"B5\").setValue(transformedWords[2])\n  spellingsSheet.getRange(\"B6\").setValue(transformedWords[3])\n  spellingsSheet.getRange(\"B7\").setValue(transformedWords[4])\n\n\n  // Find definition of the 5 words and enter them into an array and then output\n  // then into column D of sheet Spellings.\n  let defnCounter: number = 0\n  //looping through the hard words\n  for (let wordItem of selectedWords) {\n    const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${selectedWords[defnCounter]}`;\n    try {\n      const Response = await fetch(url);\n      const data = await Response.json() as DictionaryApiResponse[];\n      const firstDefinition = data[0]?.meanings[0]?.definitions[0]?.definition || String;\n      spellingsSheet.getRange('E' + (3 + defnCounter)).setValue(firstDefinition)\n      defnCounter++\n      //return firstDefinition     \n    }\n    catch (error) {\n      console.log('There was an error with retrieving the definition for: ' + selectedWords[wordItem])\n      spellingsSheet.getRange('E' + (3 + defnCounter)).setValue('Error')\n      defnCounter++\n      //return 'Error'\n    }\n  }\n  //this string is not returned to anywhere\n  return 'Routine Finished'\n}\n//interface following the structure of the returned JSON\ninterface DictionaryApiResponse {\n  word: string;\n  meanings: {\n    partOfSpeech: string;\n    definitions: {\n      definition: string;\n      synonyms: string[];\n      antonyms: string[];\n    }[];\n  }[];\n}","description":"","parameterInfo":"{\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{\"result\":{}}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}