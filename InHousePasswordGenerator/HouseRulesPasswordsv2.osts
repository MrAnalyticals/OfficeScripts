{"version":"0.2.0","body":"function main(workbook: ExcelScript.Workbook) {\n// This line of code gets a worksheet called 'Sheet1' from the workbook passed to the function\n  let Sheet1 = workbook.getWorksheet('Sheet1')\n// This line of code retrieves the value from cell A5 in the worksheet 'Sheet1' and converts it to an integer.\n  let length = parseInt(Sheet1.getRange(\"A5\").getValue().toString())\n// This line of code creates a variable 'hasDigits' of type boolean to store the result of checking whether the value of cell B5 in the worksheet 'Sheet1' is equal to \"1\".\n  let hasDigits: boolean\n  if (Sheet1.getRange(\"B5\").getValue().toString() == \"1\") {\n    hasDigits = true\n  }\n  else{\n    hasDigits = false\n  }\n// This line of code creates a variable 'upper' of type boolean to store the result of checking whether the value of cell C5 in the worksheet 'Sheet1' is equal to \"1\".\n  let upper: boolean\n  if (Sheet1.getRange(\"C5\").getValue().toString() == \"1\") {\n    upper = true\n  }\n  else{\n    upper=false\n  }\n// This line of code creates a variable 'lower' of type boolean to store the result of checking whether the value of cell D5 in the worksheet 'Sheet1' is equal to \"1\".\n  let lower: boolean\n  if (Sheet1.getRange(\"D5\").getValue().toString() == \"1\") {\n    lower = true\n  }\n  else{\n    lower=false\n  }\n// This line of code creates a variable 'alphaSeq' of type boolean to store the result of checking whether the value of cell E5 in the worksheet 'Sheet1' is equal to \"1\".\n  let alphaSeq: boolean\n  if (Sheet1.getRange(\"E5\").getValue().toString() == \"1\") {\n    alphaSeq = true\n  }\n  else{\n    alphaSeq=false\n  }\n// This line of code creates a variable 'intSeq' of type boolean to store the result of checking whether the value of cell F5 in the worksheet 'Sheet1' is equal to \"1\".\n  let intSeq: boolean\n  if (Sheet1.getRange(\"F5\").getValue().toString() == \"1\") {\n    intSeq = true\n  }\n  else{\n    intSeq=false\n  }\n// This line of code creates a variable 'hasSpecial' of type boolean to store the result of checking whether the value of cell G5 in the worksheet 'Sheet1' is equal to \"1\".\n  let hasSpecial: boolean\n  if (Sheet1.getRange(\"G5\").getValue().toString() == \"1\") {\n    hasSpecial = true\n  }\n  else{\n    hasSpecial=false\n  }\n// This line of code calls the function 'generateString' and passes the variables length, hasDigits, upper, lower, alphaSeq, intSeq, and hasSpecial to it as parameters. The result is then stored in a variable called 'ResultPassword'.\n  let ResultPassword = generateString(length, hasDigits, upper, lower, alphaSeq, intSeq, hasSpecial)\n// This line of code sets the value of cell A8 in the worksheet 'Sheet1' to the value stored in the variable 'ResultPassword'.\n  Sheet1.getRange(\"A8\").setValue(ResultPassword)\n// Logs the parameters passed to the generateString function\n  console.log('length,hasDigits,upper,lower,alphaSeq,intSeq,hasSpecial: ' + length, hasDigits, upper, lower, alphaSeq, intSeq, hasSpecial)\n// Logs the generated password\n  console.log('Password generated: ' + ResultPassword)\n\n// Function that generates a random string based on the parameters passed\n  function generateString(length: number, hasDigit: boolean, hasUpper: boolean, hasLower: boolean, noLetterSequence: boolean, noNumberSequence: boolean, hasSpecial: boolean) {\n  // String of digits to choose from\n    const digits = '0123456789';\n  // String of uppercase letters to choose from\n    const uppers = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  // String of lowercase letters to choose from\n    const lowers = 'abcdefghijklmnopqrstuvwxyz';\n  // String of special characters to choose from\n    const specials = '!\\\"£$%^&*()_-,.:;?/@’¬`|\\\\+={[}]@’~#';\n  // The result string that will be returned\n    let result = '';\n  // If hasDigit is true, adds a random digit to the result string\n    if (hasDigit) {\n      result += digits[Math.floor(Math.random() * digits.length)];\n    }\n  // If hasUpper is true, adds a random uppercase letter to the result string\n    if (hasUpper) {\n      result += uppers[Math.floor(Math.random() * uppers.length)];\n    }\n  // If hasLower is true, adds a random lowercase letter to the result string\n    if (hasLower) {\n      result += lowers[Math.floor(Math.random() * lowers.length)];\n    }\n  // If hasSpecial is true, adds a random special character to the result string\n    if (hasSpecial) {\n      result += specials[Math.floor(Math.random() * specials.length)];\n    }\n  // Counter for the loop\n    let i = result.length;\n  // Continues to add characters to the result string until its length is equal to the specified length\n    while (i < length) {\n    // Gets a random ASCII code\n      const charCode = Math.floor(Math.random() * 123);\n    // If the code is a digit, uppercase letter, lowercase letter, or special character\n      if ((charCode >= 48 && charCode <= 57) || (charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122) || specials.indexOf(String.fromCharCode(charCode)) !== -1) {\n      // If noLetterSequence is true, checks if the previous three characters form a sequential letter sequence\n        if (noLetterSequence) {\n    // If noLetterSequence is true, check if the last three characters in the result string are sequential letters \n          if (i >= 3 && (result[i - 1].charCodeAt(0) === result[i - 2].charCodeAt(0) + 1) && (result[i - 2].charCodeAt(0) === result[i - 3].charCodeAt(0) + 1)) {\n        // If they are, continue the loop without adding the next character\n            continue;\n          }\n        }\n        if (noNumberSequence) {\n    // If noNumberSequence is true, check if the last three characters in the result string are sequential numbers \n          if (i >= 2 && (Number(result[i - 1]) === Number(result[i - 2]) + 1) && (Number(result[i - 2]) === Number(result[i - 3]) + 1)) {\n        // If they are, continue the loop without adding the next character\n            continue;\n          }\n        }\n    // Add the next character to the result string\n        result += String.fromCharCode(charCode);\n    // Increment the counter\n    i++;\n      }\n    }\n    // Return the result string\n    return result;\n  }\n\n}","description":"","parameterInfo":"{\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}