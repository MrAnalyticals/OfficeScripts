{"version":"0.2.0","body":"function main(workbook: ExcelScript.Workbook) {\n  let Sudoku = workbook.getWorksheet('Sudoku');\n  let SudokuInput: (string | boolean | number)[][] = [];\n  SudokuInput = Sudoku.getRange('B2:J10').getValues();\n  let boardinput: number[][] = [];\n\n  for (let i = 0; i < 9; i++) {\n    let rowN: number[] = [];\n    for (let j = 0; j < 9; j++) {\n      let cellVal = SudokuInput[i][j];\n      if (typeof cellVal === 'number') {\n        rowN.push(cellVal);\n      } else {\n        rowN.push(0);\n      }\n    }\n    boardinput.push(rowN);\n  }\n\n  // Check rows\n  for (let i = 0; i < 9; i++) {\n    let row = boardinput[i];\n    if (!isUnique(row)) {\n      console.log(`Row ${i + 1} is invalid`);\n      return;\n    }\n  }\n\n  // Check columns\n  for (let j = 0; j < 9; j++) {\n    let col: number[] = [];\n    for (let i = 0; i < 9; i++) {\n      col.push(boardinput[i][j]);\n    }\n    if (!isUnique(col)) {\n      console.log(`Column ${j + 1} is invalid`);\n      return;\n    }\n  }\n\n  // Check sub-boxes\n  for (let boxIdx = 0; boxIdx < 9; boxIdx++) {\n    let box: number[] = [];\n    let startRow = Math.floor(boxIdx / 3) * 3;\n    let startCol = (boxIdx % 3) * 3;\n    for (let i = startRow; i < startRow + 3; i++) {\n      for (let j = startCol; j < startCol + 3; j++) {\n        box.push(boardinput[i][j]);\n      }\n    }\n    if (!isUnique(box)) {\n      console.log(`Sub-box ${boxIdx + 1} is invalid`);\n      return;\n    }\n  }\n\n  console.log(\"The Sudoku solution is valid\");\n\n  // Solve the puzzle\n  let solvedBoard = solveSudoku(boardinput);\n\n//Output the result into the board in nonbold text.\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        Sudoku.getCell(i + 1, j + 1).setValue(solvedBoard[i][j]);\n      }\n    }\n\n\n  // Print the solution to console\n  for (let i = 0; i < 9; i++) {\n    let rowStr = \"\";\n    for (let j = 0; j < 9; j++) {\n      rowStr += `${solvedBoard[i][j]} `;\n    }\n    console.log(rowStr);\n  }\n\n  function isUnique(arr: number[]) {\n    let used: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n      let val = arr[i];\n      if (val === 0) {\n        continue;\n      }\n      if (used.includes(val)) {\n        return false;\n      }\n      used.push(val);\n    }\n    return true;\n  }\n\n  function solveSudoku(board: number[][]): number[][] {\n    function solve(row: number, col: number): boolean {\n      if (col === 9) {\n        col = 0;\n        row++;\n        if (row === 9) {\n          return true;\n        }\n      }\n\n      if (board[row][col] !== 0) {\n        return solve(row, col + 1);\n      }\n\n      for (let i = 1; i <= 9; i++) {\n        if (isValidPlacement(board, row, col, i)) {\n          board[row][col] = i;\n          if (solve(row, col + 1)) {\n            return true;\n          }\n          board[row][col] = 0;\n        }\n      }\n      return false;\n    }\n    solve(0, 0);\n    return board;\n  }\n\n  function isValidPlacement(board: number[][], row: number, col: number, num: number): boolean {\n    for (let i = 0; i < 9; i++) {\n      if (board[row][i] === num || board[i][col] === num) {\n        return false;\n      }\n    }\n\n    const boxRow = Math.floor(row / 3) * 3;\n    const boxCol = Math.floor(col / 3) * 3;\n\n    for (let i = boxRow; i < boxRow + 3; i++) {\n      for (let j = boxCol; j < boxCol + 3; j++) {\n        if (board[i][j] === num) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n}","description":"","parameterInfo":"{\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}