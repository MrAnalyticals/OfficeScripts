{"version":"0.2.0","body":"function main(workbook: ExcelScript.Workbook) {\n  let allSheets = workbook.getWorksheets()\n  let ToCExists: boolean\n  let arrayOfSheetNames: Array<string>\n  arrayOfSheetNames = [''] //have to assign something to the array.\n  let arrayOfTableAddresses: Array<string>\n  arrayOfTableAddresses = [''] //have to assign something to the array.\n  let arrayOfTableAddressesVal : string\n  let k: number = 0\n\n  allSheets.forEach((sheetobj) => {\n    arrayOfSheetNames[k] = sheetobj.getName()\n    if (sheetobj.getName().toString() == 'ToC') {\n      ToCExists = true\n      let ToCSheet = workbook.getWorksheet('ToC')\n      ToCSheet.setPosition(allSheets.length-1)\n    }\n  })\n  if (ToCExists != true) {workbook.addWorksheet(\"ToC\")} \n  let tocWorkSheet = workbook.getWorksheet('ToC')\n  tocWorkSheet.getRange('A1').setValue('Contents Page')\n  // Set font bold to true for range A1 on selectedSheet\n  tocWorkSheet.getRange(\"A1\").getFormat().getFont().setBold(true);\n  // Set font color to 4472C4 for range A1 on selectedSheet\n  tocWorkSheet.getRange(\"A1\").getFormat().getFont().setColor(\"4472C4\");\n  // Set font underline to true for range A1 on selectedSheet\n  tocWorkSheet.getRange(\"A1\").getFormat().getFont().setUnderline(ExcelScript.RangeUnderlineStyle.single);\n\n\n  //delete existing ToC tables\n  tocWorkSheet.getRange(\"B:N\").delete(ExcelScript.DeleteShiftDirection.left)\n  //Tables\n  let allTables = workbook.getTables()\n  let sheetname:string\n  let cellref:string\n  let formula:string\n  let j:number\n  if (allTables.length !== 0) {\n    let tableCell = tocWorkSheet.getRange(\"E2\")\n    tableCell.setValue(\"Table\")\n    tableCell.getOffsetRange(0, 1).setValue(\"Link\")\n    for (j = 0; j < allTables.length; j++) {\n      tableCell.getOffsetRange(j + 1, 0).setValue(allTables[j].getName())\n      //adding a table range address to an array\n      arrayOfTableAddressesVal = allTables[j].getRange().getAddress().toString()\n      arrayOfTableAddressesVal = arrayOfTableAddressesVal.split(':').splice(0, 1).toString() \n      sheetname = arrayOfTableAddressesVal.split('!').splice(0, 1).toString()\n      cellref = arrayOfTableAddressesVal.split('!').splice(1, 1).toString()\n      arrayOfTableAddresses[j] = '=HYPERLINK(\"#' + \"'\" + sheetname + \"'!\" + cellref + '\",\"' + allTables[j].getName()+ '\")'\n      tableCell.getOffsetRange(j + 1, 1).setFormulaLocal(arrayOfTableAddresses[j])\n    }\n  }\n  let jStr:string = String(j+2)\n  let tableoftablesRange:string\n  tableoftablesRange = `${\"'ToC'!\" + 'E2:F' + jStr}`\n  //tableoftablesRange = `${'E2:F'+jStr}`\n  workbook.addTable(tableoftablesRange, true)\n\n//Worksheets\n  let reportCell = tocWorkSheet.getRange(\"B2\")\n  reportCell.setValue(\"Worksheet\")\n  workbook.addTable(reportCell, true)\n  reportCell.getOffsetRange(0, 1).setValue(\"Link\")\n  for (let i = 0; i < allSheets.length; i++) {\n    reportCell.getOffsetRange(i + 1, 0).setValue(allSheets[i].getName())\n  }\n  reportCell.getOffsetRange(1, 1).setFormulaR1C1(\"=HYPERLINK(\\\"#'\\\"&RC[-1]&\\\"'!A1\\\",RC[-1])\")\n//Charts\n//Test if Charts exist\n  let countOfCharts:number=0\n  allSheets.forEach((sheetobj) => {\n    let sheetsCollection = sheetobj.getCharts()\n    sheetsCollection.forEach((sheetChart) => {\n      countOfCharts++\n    })\n  })\n  if(countOfCharts!=0){\n    let M:number =0\n    let chartCell = tocWorkSheet.getRange(\"H2\")\n    chartCell.setValue(\"Chart\")\n    chartCell.getOffsetRange(0, 1).setValue(\"Link\")\n    let chartNameVal:string\n    let chartFormula:string\n    let SheetNameVal: string\n    let chartAddressesVal:string\n    //Loop through all worksheets to access each chart on each sheet\n    allSheets.forEach((sheetobj1) => {\n    SheetNameVal = sheetobj1.getName().toString()\n    //console.log('SheetNameVal: ' +SheetNameVal)\n    let sheetChartCollection = sheetobj1.getCharts()\n    sheetChartCollection.forEach((sheetChart) => {\n      chartNameVal = sheetChart.getName().toString()\n       //console.log('M: ' + M)\n       //console.log('chartNameVal: '+chartNameVal)\n  chartCell.getOffsetRange(M + 1, 0).setValue(chartNameVal)\n  let topLeftCell = getCellUnderChart(sheetChart, sheetobj1)\n  chartAddressesVal = topLeftCell.getAddress().toString()\n  chartAddressesVal = chartAddressesVal.split('!').splice(1, 1).toString()\n        chartFormula = '=HYPERLINK(\"#' + \"'\" + sheetobj1.getName() + \"'!\" + chartAddressesVal + '\",\"' + sheetobj1.getName() + '\")'\n  if (sheetobj1.getName() != 'ToC') {\n     chartCell.getOffsetRange(M + 1, 1).setFormulaLocal(chartFormula)\n  }\n  M++\n  })})\n    let MStr: string = String(M + 2)\n    let chartTableRange: string\n    chartTableRange = `${\"'ToC'!\" + 'H2:I' + MStr}`\n    workbook.addTable(chartTableRange, true)\n  }\n  \n  //Ranges\n    var RowCt = 1;\n    var sheetName = \"\";\n    let LinkFormula : string\n    let tempFormula : string\n    let bangPosition: number\n    let sheeetNameStr: string\n    let cellRefStr: string\n    let tempFormulaArray: Array<string>\n    tempFormulaArray = [''] //have to assign something to the array.\n    let MyNames = workbook.getNames();\n    let worksheets = workbook.getWorksheets()\n    tocWorkSheet.getRange(\"K2:N2\").setValues([[\"Scope\", \"Range Name\", \"RefersTo\", \"Visible\"]]);\n    for (let i = 0; i < MyNames.length; i++) {\n      RowCt++\n      tempFormula = MyNames[i].getFormula() //'=Sheet1!$B$26:$F$29\n      tempFormulaArray = tempFormula.split(':')//=Sheet1!$B$26,$F$29\n      tempFormula = tempFormulaArray[0].toString()//=Sheet1!$B$26\n      tempFormula = tempFormula.substring(1)//Sheet1!$B$26\n      bangPosition = tempFormula.search('!')//6\n      sheeetNameStr = tempFormula.substring(0,bangPosition)//Sheet1\n      cellRefStr = tempFormula.substring(bangPosition)\n      LinkFormula = '=HYPERLINK(\"#' + \"'\" + sheeetNameStr + \"'\" + cellRefStr + '\",\"' + MyNames[i].getName() +'\")' \n      //console.log(LinkFormula)\n      //=HYPERLINK(\"#'Sheet2'!A15\",\"Sheet2\")\n  //\n      tocWorkSheet.getCell(RowCt, 10).getResizedRange(0, 3).setValues([\n        [\"Workbook\", MyNames[i].getName(), '', \"'\" + MyNames[i].getVisible()]]);\n      tocWorkSheet.getCell(RowCt, 12).setFormula(LinkFormula)  \n    }\n\n    let newTable = workbook.addTable(tocWorkSheet.getRange(\"K2\").getSurroundingRegion(), true);\n    newTable.getRange().getFormat().autofitColumns();\n\n  // Auto fit the columns of range B:N on selectedSheet\n  tocWorkSheet.getRange(\"B:N\").getFormat().autofitColumns()\n  //Remove applied filter form all tables on ToC sheet.\n  let ToCsheetTableCollection = tocWorkSheet.getTables()\n  ToCsheetTableCollection.forEach((sheetTable) => {\n    let tableNameVal = sheetTable.getName().toString()\n    sheetTable.getAutoFilter().remove();\n  })\nconsole.log('Contents Page Created')\n  \n}\n\nfunction getCellUnderChart(cht: ExcelScript.Chart, ws: ExcelScript.Worksheet): ExcelScript.Range {\n  let topLeftCell = ws.getRange(\"A1\");\n  let i = 0;\n  do {\n    i++;\n    topLeftCell = topLeftCell.getOffsetRange(0, i)\n  }\n  while (topLeftCell.getLeft() < cht.getLeft());\n  i = 0;\n  do {\n    i++;\n    topLeftCell = topLeftCell.getOffsetRange(i, 0)\n  }\n  while (topLeftCell.getTop() < cht.getTop());\n\n  return topLeftCell.getOffsetRange(-1, -1);\n}\n\n","description":"","parameterInfo":"{\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}
