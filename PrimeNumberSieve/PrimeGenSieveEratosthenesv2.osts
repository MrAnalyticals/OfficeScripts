{"version":"0.2.0","body":"// This function takes an Excel workbook as input and finds the nth prime number\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the worksheet named Sheet1 from the workbook\n  let Sheet1 = workbook.getWorksheet('Sheet1')\n\n  // Get the integer value in cell B1 and parse it as a number\n  let nint: number = parseInt(Sheet1.getRange(\"B1\").getValue().toString())\n\n  // Call the nthPrime function with the parsed integer and store the result in primeResult\n  let primeResult = nthPrime(nint)\n\n  // Set the value of cell B2 in Sheet1 to the value of primeResult\n  Sheet1.getRange(\"B2\").setValue(primeResult)\n\n  // Print the value of primeResult to the console\n  console.log('Result is: ' + primeResult)\n\n  // This function takes an integer n as input and returns an array of prime numbers up to n\n  function sieveOfEratosthenes(n: number): number[] {\n    // Create an empty array to store prime numbers\n    let primes: number[] = [];\n\n    // Create a boolean array of size n+1 and initialize all values to true\n    let isPrime: boolean[] = new Array(n + 1)\n    isPrime = isPrime.fill(true)\n\n    // Set the values of 0 and 1 to false, since they are not prime\n    isPrime[0] = false;\n    isPrime[1] = false;\n\n    // Loop through all values from 2 to the square root of n\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      // If i is prime, mark all multiples of i as not prime\n      if (isPrime[i]) {\n        for (let j = i * i; j <= n; j += i) {\n          isPrime[j] = false;\n        }\n      }\n    }\n\n    // Loop through all values from 2 to n, and add the ones that are prime to the primes array\n    for (let i = 2; i <= n; i++) {\n      if (isPrime[i]) {\n        primes.push(i);\n      }\n    }\n\n    // Return the array of prime numbers up to n\n    return primes;\n  }\n\n  // This function takes an integer n as input and returns the nth prime number\n  function nthPrime(n: number): number {\n    // Find all primes up to n^2 using the sieveOfEratosthenes function, and return the nth prime from the resulting array\n    return sieveOfEratosthenes(n * n)[n - 1];\n  }\n}\n","description":"","parameterInfo":"{\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}